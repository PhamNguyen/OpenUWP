//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace OpenUWP.OpenUWP_XamlTypeInfo
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks","14.0.0.0")]
    public sealed class XamlMetaDataProvider: global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::OpenUWP.OpenUWP_XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace OpenUWP.OpenUWP_XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[34];
            _typeNameTable[0] = "OpenUWP.Controls.GifView";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[2] = "Windows.UI.Xaml.Media.Stretch";
            _typeNameTable[3] = "System.Uri";
            _typeNameTable[4] = "Object";
            _typeNameTable[5] = "OpenUWP.Controls.IconButton";
            _typeNameTable[6] = "Int32";
            _typeNameTable[7] = "Windows.UI.Xaml.Media.ImageSource";
            _typeNameTable[8] = "String";
            _typeNameTable[9] = "Windows.UI.Xaml.Media.SolidColorBrush";
            _typeNameTable[10] = "Boolean";
            _typeNameTable[11] = "Windows.UI.Xaml.Thickness";
            _typeNameTable[12] = "OpenUWP.Controls.ButtonType";
            _typeNameTable[13] = "System.Enum";
            _typeNameTable[14] = "System.ValueType";
            _typeNameTable[15] = "OpenUWP.Controls.SuperImage";
            _typeNameTable[16] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[17] = "Windows.UI.Xaml.CornerRadius";
            _typeNameTable[18] = "OpenUWP.Controls.SplitViewMenu.SplitViewItemContainerStyleSelector";
            _typeNameTable[19] = "Windows.UI.Xaml.Controls.StyleSelector";
            _typeNameTable[20] = "Windows.UI.Xaml.Style";
            _typeNameTable[21] = "OpenUWP.Controls.SplitViewMenu.SplitViewItemTemplateSelector";
            _typeNameTable[22] = "Windows.UI.Xaml.Controls.DataTemplateSelector";
            _typeNameTable[23] = "Windows.UI.Xaml.DataTemplate";
            _typeNameTable[24] = "OpenUWP.Controls.SplitViewMenu.SplitViewMenu";
            _typeNameTable[25] = "Windows.UI.Xaml.Media.Brush";
            _typeNameTable[26] = "System.Type";
            _typeNameTable[27] = "System.Collections.Generic.IEnumerable`1<OpenUWP.Controls.SplitViewMenu.ISplitViewItem>";
            _typeNameTable[28] = "OpenUWP.Controls.CornerButton";
            _typeNameTable[29] = "Windows.UI.Xaml.Controls.Button";
            _typeNameTable[30] = "Windows.UI.Xaml.Controls.ContentControl";
            _typeNameTable[31] = "OpenUWP.Controls.SplitViewMenu.MenuListView";
            _typeNameTable[32] = "Windows.UI.Xaml.Controls.ListView";
            _typeNameTable[33] = "Windows.UI.Xaml.Controls.ItemsControl";

            _typeTable = new global::System.Type[34];
            _typeTable[0] = typeof(global::OpenUWP.Controls.GifView);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[2] = typeof(global::Windows.UI.Xaml.Media.Stretch);
            _typeTable[3] = typeof(global::System.Uri);
            _typeTable[4] = typeof(global::System.Object);
            _typeTable[5] = typeof(global::OpenUWP.Controls.IconButton);
            _typeTable[6] = typeof(global::System.Int32);
            _typeTable[7] = typeof(global::Windows.UI.Xaml.Media.ImageSource);
            _typeTable[8] = typeof(global::System.String);
            _typeTable[9] = typeof(global::Windows.UI.Xaml.Media.SolidColorBrush);
            _typeTable[10] = typeof(global::System.Boolean);
            _typeTable[11] = typeof(global::Windows.UI.Xaml.Thickness);
            _typeTable[12] = typeof(global::OpenUWP.Controls.ButtonType);
            _typeTable[13] = typeof(global::System.Enum);
            _typeTable[14] = typeof(global::System.ValueType);
            _typeTable[15] = typeof(global::OpenUWP.Controls.SuperImage);
            _typeTable[16] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[17] = typeof(global::Windows.UI.Xaml.CornerRadius);
            _typeTable[18] = typeof(global::OpenUWP.Controls.SplitViewMenu.SplitViewItemContainerStyleSelector);
            _typeTable[19] = typeof(global::Windows.UI.Xaml.Controls.StyleSelector);
            _typeTable[20] = typeof(global::Windows.UI.Xaml.Style);
            _typeTable[21] = typeof(global::OpenUWP.Controls.SplitViewMenu.SplitViewItemTemplateSelector);
            _typeTable[22] = typeof(global::Windows.UI.Xaml.Controls.DataTemplateSelector);
            _typeTable[23] = typeof(global::Windows.UI.Xaml.DataTemplate);
            _typeTable[24] = typeof(global::OpenUWP.Controls.SplitViewMenu.SplitViewMenu);
            _typeTable[25] = typeof(global::Windows.UI.Xaml.Media.Brush);
            _typeTable[26] = typeof(global::System.Type);
            _typeTable[27] = typeof(global::System.Collections.Generic.IEnumerable<global::OpenUWP.Controls.SplitViewMenu.ISplitViewItem>);
            _typeTable[28] = typeof(global::OpenUWP.Controls.CornerButton);
            _typeTable[29] = typeof(global::Windows.UI.Xaml.Controls.Button);
            _typeTable[30] = typeof(global::Windows.UI.Xaml.Controls.ContentControl);
            _typeTable[31] = typeof(global::OpenUWP.Controls.SplitViewMenu.MenuListView);
            _typeTable[32] = typeof(global::Windows.UI.Xaml.Controls.ListView);
            _typeTable[33] = typeof(global::Windows.UI.Xaml.Controls.ItemsControl);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_GifView() { return new global::OpenUWP.Controls.GifView(); }
        private object Activate_5_IconButton() { return new global::OpenUWP.Controls.IconButton(); }
        private object Activate_15_SuperImage() { return new global::OpenUWP.Controls.SuperImage(); }
        private object Activate_18_SplitViewItemContainerStyleSelector() { return new global::OpenUWP.Controls.SplitViewMenu.SplitViewItemContainerStyleSelector(); }
        private object Activate_21_SplitViewItemTemplateSelector() { return new global::OpenUWP.Controls.SplitViewMenu.SplitViewItemTemplateSelector(); }
        private object Activate_24_SplitViewMenu() { return new global::OpenUWP.Controls.SplitViewMenu.SplitViewMenu(); }
        private object Activate_28_CornerButton() { return new global::OpenUWP.Controls.CornerButton(); }
        private object Activate_31_MenuListView() { return new global::OpenUWP.Controls.SplitViewMenu.MenuListView(); }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::OpenUWP.OpenUWP_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  OpenUWP.Controls.GifView
                userType = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_0_GifView;
                userType.AddMemberName("Stretch");
                userType.AddMemberName("UriSource");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Windows.UI.Xaml.Media.Stretch
                xamlType = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  System.Uri
                userType = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 4:   //  Object
                xamlType = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  OpenUWP.Controls.IconButton
                userType = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_5_IconButton;
                userType.AddMemberName("DecodePixelWidth");
                userType.AddMemberName("RestImageSource");
                userType.AddMemberName("PressedImageSource");
                userType.AddMemberName("Title");
                userType.AddMemberName("TitleFontSize");
                userType.AddMemberName("ContentStrect");
                userType.AddMemberName("TitleForegroundInRestState");
                userType.AddMemberName("TitleForegroundInPressedState");
                userType.AddMemberName("BackgroundInRestState");
                userType.AddMemberName("BackgroundInPressedState");
                userType.AddMemberName("IsChecked");
                userType.AddMemberName("ImageMargin");
                userType.AddMemberName("NotificationNumber");
                userType.AddMemberName("Type");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 6:   //  Int32
                xamlType = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 7:   //  Windows.UI.Xaml.Media.ImageSource
                xamlType = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 8:   //  String
                xamlType = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  Windows.UI.Xaml.Media.SolidColorBrush
                xamlType = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  Boolean
                xamlType = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 11:   //  Windows.UI.Xaml.Thickness
                xamlType = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 12:   //  OpenUWP.Controls.ButtonType
                userType = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Normal", global::OpenUWP.Controls.ButtonType.Normal);
                userType.AddEnumValue("Toogle", global::OpenUWP.Controls.ButtonType.Toogle);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 13:   //  System.Enum
                userType = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 14:   //  System.ValueType
                userType = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 15:   //  OpenUWP.Controls.SuperImage
                userType = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_15_SuperImage;
                userType.AddMemberName("PlaceholderImageSource");
                userType.AddMemberName("Source");
                userType.AddMemberName("Stretch");
                userType.AddMemberName("CornerRadius");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 17:   //  Windows.UI.Xaml.CornerRadius
                xamlType = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 18:   //  OpenUWP.Controls.SplitViewMenu.SplitViewItemContainerStyleSelector
                userType = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.StyleSelector"));
                userType.Activator = Activate_18_SplitViewItemContainerStyleSelector;
                userType.AddMemberName("GroupStyle");
                userType.AddMemberName("SeparatorStyle");
                userType.AddMemberName("NavigationMenuItemstyle");
                userType.AddMemberName("ActionMenuItemstyle");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 19:   //  Windows.UI.Xaml.Controls.StyleSelector
                xamlType = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 20:   //  Windows.UI.Xaml.Style
                xamlType = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 21:   //  OpenUWP.Controls.SplitViewMenu.SplitViewItemTemplateSelector
                userType = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.DataTemplateSelector"));
                userType.Activator = Activate_21_SplitViewItemTemplateSelector;
                userType.AddMemberName("GroupTemplate");
                userType.AddMemberName("SeparatorTemplate");
                userType.AddMemberName("NavigationMenuItemTemplate");
                userType.AddMemberName("ActionMenuItemTemplate");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 22:   //  Windows.UI.Xaml.Controls.DataTemplateSelector
                xamlType = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 23:   //  Windows.UI.Xaml.DataTemplate
                xamlType = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 24:   //  OpenUWP.Controls.SplitViewMenu.SplitViewMenu
                userType = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_24_SplitViewMenu;
                userType.AddMemberName("MenuItemTemplateSelector");
                userType.AddMemberName("MenuItemContainerStyleSelector");
                userType.AddMemberName("HeaderBackground");
                userType.AddMemberName("DisplayModeTriggerMedium");
                userType.AddMemberName("DisplayModeTriggerLarge");
                userType.AddMemberName("IsPaneOpenTriggerLarge");
                userType.AddMemberName("IsPaneOpenTriggerMedium");
                userType.AddMemberName("MenuItemTemplate");
                userType.AddMemberName("MenuItemContainerStyle");
                userType.AddMemberName("InitialPage");
                userType.AddMemberName("MenuItems");
                userType.AddMemberName("MenuHeaderTemplate");
                userType.AddMemberName("MenuFooterTemplate");
                userType.AddMemberName("IsShowHamburgerButtonWhileOpen");
                userType.AddMemberName("Header");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  Windows.UI.Xaml.Media.Brush
                xamlType = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 26:   //  System.Type
                userType = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 27:   //  System.Collections.Generic.IEnumerable`1<OpenUWP.Controls.SplitViewMenu.ISplitViewItem>
                userType = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 28:   //  OpenUWP.Controls.CornerButton
                userType = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Button"));
                userType.Activator = Activate_28_CornerButton;
                userType.AddMemberName("CornerRadius");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 29:   //  Windows.UI.Xaml.Controls.Button
                xamlType = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 30:   //  Windows.UI.Xaml.Controls.ContentControl
                xamlType = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 31:   //  OpenUWP.Controls.SplitViewMenu.MenuListView
                userType = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ListView"));
                userType.Activator = Activate_31_MenuListView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 32:   //  Windows.UI.Xaml.Controls.ListView
                xamlType = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 33:   //  Windows.UI.Xaml.Controls.ItemsControl
                xamlType = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;
            }
            return xamlType;
        }


        private object get_0_GifView_Stretch(object instance)
        {
            var that = (global::OpenUWP.Controls.GifView)instance;
            return that.Stretch;
        }
        private void set_0_GifView_Stretch(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.GifView)instance;
            that.Stretch = (global::Windows.UI.Xaml.Media.Stretch)Value;
        }
        private object get_1_GifView_UriSource(object instance)
        {
            var that = (global::OpenUWP.Controls.GifView)instance;
            return that.UriSource;
        }
        private void set_1_GifView_UriSource(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.GifView)instance;
            that.UriSource = (global::System.Uri)Value;
        }
        private object get_2_IconButton_DecodePixelWidth(object instance)
        {
            var that = (global::OpenUWP.Controls.IconButton)instance;
            return that.DecodePixelWidth;
        }
        private void set_2_IconButton_DecodePixelWidth(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.IconButton)instance;
            that.DecodePixelWidth = (global::System.Int32)Value;
        }
        private object get_3_IconButton_RestImageSource(object instance)
        {
            var that = (global::OpenUWP.Controls.IconButton)instance;
            return that.RestImageSource;
        }
        private void set_3_IconButton_RestImageSource(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.IconButton)instance;
            that.RestImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_4_IconButton_PressedImageSource(object instance)
        {
            var that = (global::OpenUWP.Controls.IconButton)instance;
            return that.PressedImageSource;
        }
        private void set_4_IconButton_PressedImageSource(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.IconButton)instance;
            that.PressedImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_5_IconButton_Title(object instance)
        {
            var that = (global::OpenUWP.Controls.IconButton)instance;
            return that.Title;
        }
        private void set_5_IconButton_Title(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.IconButton)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_6_IconButton_TitleFontSize(object instance)
        {
            var that = (global::OpenUWP.Controls.IconButton)instance;
            return that.TitleFontSize;
        }
        private void set_6_IconButton_TitleFontSize(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.IconButton)instance;
            that.TitleFontSize = (global::System.Int32)Value;
        }
        private object get_7_IconButton_ContentStrect(object instance)
        {
            var that = (global::OpenUWP.Controls.IconButton)instance;
            return that.ContentStrect;
        }
        private void set_7_IconButton_ContentStrect(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.IconButton)instance;
            that.ContentStrect = (global::Windows.UI.Xaml.Media.Stretch)Value;
        }
        private object get_8_IconButton_TitleForegroundInRestState(object instance)
        {
            var that = (global::OpenUWP.Controls.IconButton)instance;
            return that.TitleForegroundInRestState;
        }
        private void set_8_IconButton_TitleForegroundInRestState(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.IconButton)instance;
            that.TitleForegroundInRestState = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_9_IconButton_TitleForegroundInPressedState(object instance)
        {
            var that = (global::OpenUWP.Controls.IconButton)instance;
            return that.TitleForegroundInPressedState;
        }
        private void set_9_IconButton_TitleForegroundInPressedState(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.IconButton)instance;
            that.TitleForegroundInPressedState = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_10_IconButton_BackgroundInRestState(object instance)
        {
            var that = (global::OpenUWP.Controls.IconButton)instance;
            return that.BackgroundInRestState;
        }
        private void set_10_IconButton_BackgroundInRestState(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.IconButton)instance;
            that.BackgroundInRestState = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_11_IconButton_BackgroundInPressedState(object instance)
        {
            var that = (global::OpenUWP.Controls.IconButton)instance;
            return that.BackgroundInPressedState;
        }
        private void set_11_IconButton_BackgroundInPressedState(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.IconButton)instance;
            that.BackgroundInPressedState = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_12_IconButton_IsChecked(object instance)
        {
            var that = (global::OpenUWP.Controls.IconButton)instance;
            return that.IsChecked;
        }
        private void set_12_IconButton_IsChecked(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.IconButton)instance;
            that.IsChecked = (global::System.Boolean)Value;
        }
        private object get_13_IconButton_ImageMargin(object instance)
        {
            var that = (global::OpenUWP.Controls.IconButton)instance;
            return that.ImageMargin;
        }
        private void set_13_IconButton_ImageMargin(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.IconButton)instance;
            that.ImageMargin = (global::Windows.UI.Xaml.Thickness)Value;
        }
        private object get_14_IconButton_NotificationNumber(object instance)
        {
            var that = (global::OpenUWP.Controls.IconButton)instance;
            return that.NotificationNumber;
        }
        private void set_14_IconButton_NotificationNumber(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.IconButton)instance;
            that.NotificationNumber = (global::System.Int32)Value;
        }
        private object get_15_IconButton_Type(object instance)
        {
            var that = (global::OpenUWP.Controls.IconButton)instance;
            return that.Type;
        }
        private void set_15_IconButton_Type(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.IconButton)instance;
            that.Type = (global::OpenUWP.Controls.ButtonType)Value;
        }
        private object get_16_SuperImage_PlaceholderImageSource(object instance)
        {
            var that = (global::OpenUWP.Controls.SuperImage)instance;
            return that.PlaceholderImageSource;
        }
        private void set_16_SuperImage_PlaceholderImageSource(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.SuperImage)instance;
            that.PlaceholderImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_17_SuperImage_Source(object instance)
        {
            var that = (global::OpenUWP.Controls.SuperImage)instance;
            return that.Source;
        }
        private void set_17_SuperImage_Source(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.SuperImage)instance;
            that.Source = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_18_SuperImage_Stretch(object instance)
        {
            var that = (global::OpenUWP.Controls.SuperImage)instance;
            return that.Stretch;
        }
        private void set_18_SuperImage_Stretch(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.SuperImage)instance;
            that.Stretch = (global::Windows.UI.Xaml.Media.Stretch)Value;
        }
        private object get_19_SuperImage_CornerRadius(object instance)
        {
            var that = (global::OpenUWP.Controls.SuperImage)instance;
            return that.CornerRadius;
        }
        private void set_19_SuperImage_CornerRadius(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.SuperImage)instance;
            that.CornerRadius = (global::Windows.UI.Xaml.CornerRadius)Value;
        }
        private object get_20_SplitViewItemContainerStyleSelector_GroupStyle(object instance)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewItemContainerStyleSelector)instance;
            return that.GroupStyle;
        }
        private void set_20_SplitViewItemContainerStyleSelector_GroupStyle(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewItemContainerStyleSelector)instance;
            that.GroupStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_21_SplitViewItemContainerStyleSelector_SeparatorStyle(object instance)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewItemContainerStyleSelector)instance;
            return that.SeparatorStyle;
        }
        private void set_21_SplitViewItemContainerStyleSelector_SeparatorStyle(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewItemContainerStyleSelector)instance;
            that.SeparatorStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_22_SplitViewItemContainerStyleSelector_NavigationMenuItemstyle(object instance)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewItemContainerStyleSelector)instance;
            return that.NavigationMenuItemstyle;
        }
        private void set_22_SplitViewItemContainerStyleSelector_NavigationMenuItemstyle(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewItemContainerStyleSelector)instance;
            that.NavigationMenuItemstyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_23_SplitViewItemContainerStyleSelector_ActionMenuItemstyle(object instance)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewItemContainerStyleSelector)instance;
            return that.ActionMenuItemstyle;
        }
        private void set_23_SplitViewItemContainerStyleSelector_ActionMenuItemstyle(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewItemContainerStyleSelector)instance;
            that.ActionMenuItemstyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_24_SplitViewItemTemplateSelector_GroupTemplate(object instance)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewItemTemplateSelector)instance;
            return that.GroupTemplate;
        }
        private void set_24_SplitViewItemTemplateSelector_GroupTemplate(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewItemTemplateSelector)instance;
            that.GroupTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_25_SplitViewItemTemplateSelector_SeparatorTemplate(object instance)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewItemTemplateSelector)instance;
            return that.SeparatorTemplate;
        }
        private void set_25_SplitViewItemTemplateSelector_SeparatorTemplate(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewItemTemplateSelector)instance;
            that.SeparatorTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_26_SplitViewItemTemplateSelector_NavigationMenuItemTemplate(object instance)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewItemTemplateSelector)instance;
            return that.NavigationMenuItemTemplate;
        }
        private void set_26_SplitViewItemTemplateSelector_NavigationMenuItemTemplate(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewItemTemplateSelector)instance;
            that.NavigationMenuItemTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_27_SplitViewItemTemplateSelector_ActionMenuItemTemplate(object instance)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewItemTemplateSelector)instance;
            return that.ActionMenuItemTemplate;
        }
        private void set_27_SplitViewItemTemplateSelector_ActionMenuItemTemplate(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewItemTemplateSelector)instance;
            that.ActionMenuItemTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_28_SplitViewMenu_MenuItemTemplateSelector(object instance)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewMenu)instance;
            return that.MenuItemTemplateSelector;
        }
        private void set_28_SplitViewMenu_MenuItemTemplateSelector(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewMenu)instance;
            that.MenuItemTemplateSelector = (global::Windows.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_29_SplitViewMenu_MenuItemContainerStyleSelector(object instance)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewMenu)instance;
            return that.MenuItemContainerStyleSelector;
        }
        private void set_29_SplitViewMenu_MenuItemContainerStyleSelector(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewMenu)instance;
            that.MenuItemContainerStyleSelector = (global::Windows.UI.Xaml.Controls.StyleSelector)Value;
        }
        private object get_30_SplitViewMenu_HeaderBackground(object instance)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewMenu)instance;
            return that.HeaderBackground;
        }
        private void set_30_SplitViewMenu_HeaderBackground(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewMenu)instance;
            that.HeaderBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_31_SplitViewMenu_DisplayModeTriggerMedium(object instance)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewMenu)instance;
            return that.DisplayModeTriggerMedium;
        }
        private object get_32_SplitViewMenu_DisplayModeTriggerLarge(object instance)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewMenu)instance;
            return that.DisplayModeTriggerLarge;
        }
        private object get_33_SplitViewMenu_IsPaneOpenTriggerLarge(object instance)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewMenu)instance;
            return that.IsPaneOpenTriggerLarge;
        }
        private object get_34_SplitViewMenu_IsPaneOpenTriggerMedium(object instance)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewMenu)instance;
            return that.IsPaneOpenTriggerMedium;
        }
        private object get_35_SplitViewMenu_MenuItemTemplate(object instance)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewMenu)instance;
            return that.MenuItemTemplate;
        }
        private void set_35_SplitViewMenu_MenuItemTemplate(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewMenu)instance;
            that.MenuItemTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_36_SplitViewMenu_MenuItemContainerStyle(object instance)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewMenu)instance;
            return that.MenuItemContainerStyle;
        }
        private void set_36_SplitViewMenu_MenuItemContainerStyle(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewMenu)instance;
            that.MenuItemContainerStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_37_SplitViewMenu_InitialPage(object instance)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewMenu)instance;
            return that.InitialPage;
        }
        private void set_37_SplitViewMenu_InitialPage(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewMenu)instance;
            that.InitialPage = (global::System.Type)Value;
        }
        private object get_38_SplitViewMenu_MenuItems(object instance)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewMenu)instance;
            return that.MenuItems;
        }
        private void set_38_SplitViewMenu_MenuItems(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewMenu)instance;
            that.MenuItems = (global::System.Collections.Generic.IEnumerable<global::OpenUWP.Controls.SplitViewMenu.ISplitViewItem>)Value;
        }
        private object get_39_SplitViewMenu_MenuHeaderTemplate(object instance)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewMenu)instance;
            return that.MenuHeaderTemplate;
        }
        private void set_39_SplitViewMenu_MenuHeaderTemplate(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewMenu)instance;
            that.MenuHeaderTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_40_SplitViewMenu_MenuFooterTemplate(object instance)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewMenu)instance;
            return that.MenuFooterTemplate;
        }
        private void set_40_SplitViewMenu_MenuFooterTemplate(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewMenu)instance;
            that.MenuFooterTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_41_SplitViewMenu_IsShowHamburgerButtonWhileOpen(object instance)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewMenu)instance;
            return that.IsShowHamburgerButtonWhileOpen;
        }
        private void set_41_SplitViewMenu_IsShowHamburgerButtonWhileOpen(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewMenu)instance;
            that.IsShowHamburgerButtonWhileOpen = (global::System.Boolean)Value;
        }
        private object get_42_SplitViewMenu_Header(object instance)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewMenu)instance;
            return that.Header;
        }
        private void set_42_SplitViewMenu_Header(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.SplitViewMenu.SplitViewMenu)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_43_CornerButton_CornerRadius(object instance)
        {
            var that = (global::OpenUWP.Controls.CornerButton)instance;
            return that.CornerRadius;
        }
        private void set_43_CornerButton_CornerRadius(object instance, object Value)
        {
            var that = (global::OpenUWP.Controls.CornerButton)instance;
            that.CornerRadius = (global::Windows.UI.Xaml.CornerRadius)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember xamlMember = null;
            global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "OpenUWP.Controls.GifView.Stretch":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.GifView");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "Stretch", "Windows.UI.Xaml.Media.Stretch");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_GifView_Stretch;
                xamlMember.Setter = set_0_GifView_Stretch;
                break;
            case "OpenUWP.Controls.GifView.UriSource":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.GifView");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "UriSource", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_GifView_UriSource;
                xamlMember.Setter = set_1_GifView_UriSource;
                break;
            case "OpenUWP.Controls.IconButton.DecodePixelWidth":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.IconButton");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "DecodePixelWidth", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_IconButton_DecodePixelWidth;
                xamlMember.Setter = set_2_IconButton_DecodePixelWidth;
                break;
            case "OpenUWP.Controls.IconButton.RestImageSource":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.IconButton");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "RestImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_IconButton_RestImageSource;
                xamlMember.Setter = set_3_IconButton_RestImageSource;
                break;
            case "OpenUWP.Controls.IconButton.PressedImageSource":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.IconButton");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "PressedImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_IconButton_PressedImageSource;
                xamlMember.Setter = set_4_IconButton_PressedImageSource;
                break;
            case "OpenUWP.Controls.IconButton.Title":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.IconButton");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.Getter = get_5_IconButton_Title;
                xamlMember.Setter = set_5_IconButton_Title;
                break;
            case "OpenUWP.Controls.IconButton.TitleFontSize":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.IconButton");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "TitleFontSize", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_IconButton_TitleFontSize;
                xamlMember.Setter = set_6_IconButton_TitleFontSize;
                break;
            case "OpenUWP.Controls.IconButton.ContentStrect":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.IconButton");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "ContentStrect", "Windows.UI.Xaml.Media.Stretch");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_IconButton_ContentStrect;
                xamlMember.Setter = set_7_IconButton_ContentStrect;
                break;
            case "OpenUWP.Controls.IconButton.TitleForegroundInRestState":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.IconButton");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "TitleForegroundInRestState", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.Getter = get_8_IconButton_TitleForegroundInRestState;
                xamlMember.Setter = set_8_IconButton_TitleForegroundInRestState;
                break;
            case "OpenUWP.Controls.IconButton.TitleForegroundInPressedState":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.IconButton");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "TitleForegroundInPressedState", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.Getter = get_9_IconButton_TitleForegroundInPressedState;
                xamlMember.Setter = set_9_IconButton_TitleForegroundInPressedState;
                break;
            case "OpenUWP.Controls.IconButton.BackgroundInRestState":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.IconButton");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "BackgroundInRestState", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_IconButton_BackgroundInRestState;
                xamlMember.Setter = set_10_IconButton_BackgroundInRestState;
                break;
            case "OpenUWP.Controls.IconButton.BackgroundInPressedState":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.IconButton");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "BackgroundInPressedState", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_IconButton_BackgroundInPressedState;
                xamlMember.Setter = set_11_IconButton_BackgroundInPressedState;
                break;
            case "OpenUWP.Controls.IconButton.IsChecked":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.IconButton");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "IsChecked", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_IconButton_IsChecked;
                xamlMember.Setter = set_12_IconButton_IsChecked;
                break;
            case "OpenUWP.Controls.IconButton.ImageMargin":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.IconButton");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "ImageMargin", "Windows.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_IconButton_ImageMargin;
                xamlMember.Setter = set_13_IconButton_ImageMargin;
                break;
            case "OpenUWP.Controls.IconButton.NotificationNumber":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.IconButton");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "NotificationNumber", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_IconButton_NotificationNumber;
                xamlMember.Setter = set_14_IconButton_NotificationNumber;
                break;
            case "OpenUWP.Controls.IconButton.Type":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.IconButton");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "Type", "OpenUWP.Controls.ButtonType");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_IconButton_Type;
                xamlMember.Setter = set_15_IconButton_Type;
                break;
            case "OpenUWP.Controls.SuperImage.PlaceholderImageSource":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.SuperImage");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "PlaceholderImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.Getter = get_16_SuperImage_PlaceholderImageSource;
                xamlMember.Setter = set_16_SuperImage_PlaceholderImageSource;
                break;
            case "OpenUWP.Controls.SuperImage.Source":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.SuperImage");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "Source", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.Getter = get_17_SuperImage_Source;
                xamlMember.Setter = set_17_SuperImage_Source;
                break;
            case "OpenUWP.Controls.SuperImage.Stretch":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.SuperImage");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "Stretch", "Windows.UI.Xaml.Media.Stretch");
                xamlMember.Getter = get_18_SuperImage_Stretch;
                xamlMember.Setter = set_18_SuperImage_Stretch;
                break;
            case "OpenUWP.Controls.SuperImage.CornerRadius":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.SuperImage");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "CornerRadius", "Windows.UI.Xaml.CornerRadius");
                xamlMember.Getter = get_19_SuperImage_CornerRadius;
                xamlMember.Setter = set_19_SuperImage_CornerRadius;
                break;
            case "OpenUWP.Controls.SplitViewMenu.SplitViewItemContainerStyleSelector.GroupStyle":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.SplitViewMenu.SplitViewItemContainerStyleSelector");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "GroupStyle", "Windows.UI.Xaml.Style");
                xamlMember.Getter = get_20_SplitViewItemContainerStyleSelector_GroupStyle;
                xamlMember.Setter = set_20_SplitViewItemContainerStyleSelector_GroupStyle;
                break;
            case "OpenUWP.Controls.SplitViewMenu.SplitViewItemContainerStyleSelector.SeparatorStyle":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.SplitViewMenu.SplitViewItemContainerStyleSelector");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "SeparatorStyle", "Windows.UI.Xaml.Style");
                xamlMember.Getter = get_21_SplitViewItemContainerStyleSelector_SeparatorStyle;
                xamlMember.Setter = set_21_SplitViewItemContainerStyleSelector_SeparatorStyle;
                break;
            case "OpenUWP.Controls.SplitViewMenu.SplitViewItemContainerStyleSelector.NavigationMenuItemstyle":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.SplitViewMenu.SplitViewItemContainerStyleSelector");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "NavigationMenuItemstyle", "Windows.UI.Xaml.Style");
                xamlMember.Getter = get_22_SplitViewItemContainerStyleSelector_NavigationMenuItemstyle;
                xamlMember.Setter = set_22_SplitViewItemContainerStyleSelector_NavigationMenuItemstyle;
                break;
            case "OpenUWP.Controls.SplitViewMenu.SplitViewItemContainerStyleSelector.ActionMenuItemstyle":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.SplitViewMenu.SplitViewItemContainerStyleSelector");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "ActionMenuItemstyle", "Windows.UI.Xaml.Style");
                xamlMember.Getter = get_23_SplitViewItemContainerStyleSelector_ActionMenuItemstyle;
                xamlMember.Setter = set_23_SplitViewItemContainerStyleSelector_ActionMenuItemstyle;
                break;
            case "OpenUWP.Controls.SplitViewMenu.SplitViewItemTemplateSelector.GroupTemplate":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.SplitViewMenu.SplitViewItemTemplateSelector");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "GroupTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_24_SplitViewItemTemplateSelector_GroupTemplate;
                xamlMember.Setter = set_24_SplitViewItemTemplateSelector_GroupTemplate;
                break;
            case "OpenUWP.Controls.SplitViewMenu.SplitViewItemTemplateSelector.SeparatorTemplate":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.SplitViewMenu.SplitViewItemTemplateSelector");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "SeparatorTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_25_SplitViewItemTemplateSelector_SeparatorTemplate;
                xamlMember.Setter = set_25_SplitViewItemTemplateSelector_SeparatorTemplate;
                break;
            case "OpenUWP.Controls.SplitViewMenu.SplitViewItemTemplateSelector.NavigationMenuItemTemplate":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.SplitViewMenu.SplitViewItemTemplateSelector");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "NavigationMenuItemTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_26_SplitViewItemTemplateSelector_NavigationMenuItemTemplate;
                xamlMember.Setter = set_26_SplitViewItemTemplateSelector_NavigationMenuItemTemplate;
                break;
            case "OpenUWP.Controls.SplitViewMenu.SplitViewItemTemplateSelector.ActionMenuItemTemplate":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.SplitViewMenu.SplitViewItemTemplateSelector");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "ActionMenuItemTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_27_SplitViewItemTemplateSelector_ActionMenuItemTemplate;
                xamlMember.Setter = set_27_SplitViewItemTemplateSelector_ActionMenuItemTemplate;
                break;
            case "OpenUWP.Controls.SplitViewMenu.SplitViewMenu.MenuItemTemplateSelector":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.SplitViewMenu.SplitViewMenu");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "MenuItemTemplateSelector", "Windows.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_SplitViewMenu_MenuItemTemplateSelector;
                xamlMember.Setter = set_28_SplitViewMenu_MenuItemTemplateSelector;
                break;
            case "OpenUWP.Controls.SplitViewMenu.SplitViewMenu.MenuItemContainerStyleSelector":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.SplitViewMenu.SplitViewMenu");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "MenuItemContainerStyleSelector", "Windows.UI.Xaml.Controls.StyleSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_SplitViewMenu_MenuItemContainerStyleSelector;
                xamlMember.Setter = set_29_SplitViewMenu_MenuItemContainerStyleSelector;
                break;
            case "OpenUWP.Controls.SplitViewMenu.SplitViewMenu.HeaderBackground":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.SplitViewMenu.SplitViewMenu");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "HeaderBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_SplitViewMenu_HeaderBackground;
                xamlMember.Setter = set_30_SplitViewMenu_HeaderBackground;
                break;
            case "OpenUWP.Controls.SplitViewMenu.SplitViewMenu.DisplayModeTriggerMedium":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.SplitViewMenu.SplitViewMenu");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "DisplayModeTriggerMedium", "Object");
                xamlMember.Getter = get_31_SplitViewMenu_DisplayModeTriggerMedium;
                xamlMember.SetIsReadOnly();
                break;
            case "OpenUWP.Controls.SplitViewMenu.SplitViewMenu.DisplayModeTriggerLarge":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.SplitViewMenu.SplitViewMenu");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "DisplayModeTriggerLarge", "Object");
                xamlMember.Getter = get_32_SplitViewMenu_DisplayModeTriggerLarge;
                xamlMember.SetIsReadOnly();
                break;
            case "OpenUWP.Controls.SplitViewMenu.SplitViewMenu.IsPaneOpenTriggerLarge":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.SplitViewMenu.SplitViewMenu");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "IsPaneOpenTriggerLarge", "Object");
                xamlMember.Getter = get_33_SplitViewMenu_IsPaneOpenTriggerLarge;
                xamlMember.SetIsReadOnly();
                break;
            case "OpenUWP.Controls.SplitViewMenu.SplitViewMenu.IsPaneOpenTriggerMedium":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.SplitViewMenu.SplitViewMenu");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "IsPaneOpenTriggerMedium", "Object");
                xamlMember.Getter = get_34_SplitViewMenu_IsPaneOpenTriggerMedium;
                xamlMember.SetIsReadOnly();
                break;
            case "OpenUWP.Controls.SplitViewMenu.SplitViewMenu.MenuItemTemplate":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.SplitViewMenu.SplitViewMenu");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "MenuItemTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_35_SplitViewMenu_MenuItemTemplate;
                xamlMember.Setter = set_35_SplitViewMenu_MenuItemTemplate;
                break;
            case "OpenUWP.Controls.SplitViewMenu.SplitViewMenu.MenuItemContainerStyle":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.SplitViewMenu.SplitViewMenu");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "MenuItemContainerStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_36_SplitViewMenu_MenuItemContainerStyle;
                xamlMember.Setter = set_36_SplitViewMenu_MenuItemContainerStyle;
                break;
            case "OpenUWP.Controls.SplitViewMenu.SplitViewMenu.InitialPage":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.SplitViewMenu.SplitViewMenu");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "InitialPage", "System.Type");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_SplitViewMenu_InitialPage;
                xamlMember.Setter = set_37_SplitViewMenu_InitialPage;
                break;
            case "OpenUWP.Controls.SplitViewMenu.SplitViewMenu.MenuItems":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.SplitViewMenu.SplitViewMenu");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "MenuItems", "System.Collections.Generic.IEnumerable`1<OpenUWP.Controls.SplitViewMenu.ISplitViewItem>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_38_SplitViewMenu_MenuItems;
                xamlMember.Setter = set_38_SplitViewMenu_MenuItems;
                break;
            case "OpenUWP.Controls.SplitViewMenu.SplitViewMenu.MenuHeaderTemplate":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.SplitViewMenu.SplitViewMenu");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "MenuHeaderTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_39_SplitViewMenu_MenuHeaderTemplate;
                xamlMember.Setter = set_39_SplitViewMenu_MenuHeaderTemplate;
                break;
            case "OpenUWP.Controls.SplitViewMenu.SplitViewMenu.MenuFooterTemplate":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.SplitViewMenu.SplitViewMenu");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "MenuFooterTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_40_SplitViewMenu_MenuFooterTemplate;
                xamlMember.Setter = set_40_SplitViewMenu_MenuFooterTemplate;
                break;
            case "OpenUWP.Controls.SplitViewMenu.SplitViewMenu.IsShowHamburgerButtonWhileOpen":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.SplitViewMenu.SplitViewMenu");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "IsShowHamburgerButtonWhileOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_41_SplitViewMenu_IsShowHamburgerButtonWhileOpen;
                xamlMember.Setter = set_41_SplitViewMenu_IsShowHamburgerButtonWhileOpen;
                break;
            case "OpenUWP.Controls.SplitViewMenu.SplitViewMenu.Header":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.SplitViewMenu.SplitViewMenu");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_42_SplitViewMenu_Header;
                xamlMember.Setter = set_42_SplitViewMenu_Header;
                break;
            case "OpenUWP.Controls.CornerButton.CornerRadius":
                userType = (global::OpenUWP.OpenUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OpenUWP.Controls.CornerButton");
                xamlMember = new global::OpenUWP.OpenUWP_XamlTypeInfo.XamlMember(this, "CornerRadius", "Windows.UI.Xaml.CornerRadius");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_43_CornerButton_CornerRadius;
                xamlMember.Setter = set_43_CornerButton_CornerRadius;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::OpenUWP.OpenUWP_XamlTypeInfo.XamlSystemBaseType
    {
        global::OpenUWP.OpenUWP_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::OpenUWP.OpenUWP_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::OpenUWP.OpenUWP_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::OpenUWP.OpenUWP_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

